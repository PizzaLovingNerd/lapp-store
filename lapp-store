#!/usr/bin/env python3

# This python program is very long.
# To find a certain section,
# hit CTRL-F and type "find"
# and then type one of the sections
# example: "findSectionsList"
#
# Here are the sections:
# SectionsList
# VariablesSet
# HeaderBar
# GtkListGen
# VisibleStackSetup
# ReadMetadata

import gi
gi.require_version('Gtk', '3.0')
gi.require_version('Handy', '0.0')
gi.require_version('AppStream', '1.0')
gi.require_version('AppStreamGlib', '1.0')
from gi.repository import Gtk, Handy, Gio, GLib, AppStream, AppStreamGlib
from gi.repository.GdkPixbuf import Pixbuf
import os
import subprocess
from urllib.request import urlopen
import json

HOME = os.getenv("HOME")
DIR = "{0}/.local/share/lapp-store".format(HOME)
ICONDIR = "{0}/icons/".format(DIR)
APPSTREAMICONDIR = "{0}appstream/".format(ICONDIR)
FLATHUBICONDIR = "{0}flathub/".format(ICONDIR)
FALLBACKICONDIR = "{0}fallback/".format(ICONDIR)

with open("metadata.json") as metadata:
	repo = json.load(metadata)

if os.path.isdir(DIR) == False:
	os.makedirs(DIR)
	os.chdir(DIR)
	#git = subprocess.Popen(["git", "clone", "https://github.com/pizzalovingnerd/lapp-store-metadata", "."])
else: 
	os.chdir(DIR)
	#git = subprocess.Popen(["git", "pull", "https://github.com/pizzalovingnerd/lapp-store-metadata"])
#git.wait()

class lapp(Gtk.Window):
	
	# The Window
	def __init__(self):

		# findVariablesSet

		self.ListBoxRows = {}
		self.Box = {}
		self.VBox = {}
		self.Icon = {}
		self.Pixbuf = {}
		self.Name = {}
		self.ShortDescription = {}
		self.Description = {}
		self.catagory = {}
		self.catagoryScroll = {}
		self.catagoryRow = {}
		self.catagoryLabel = {}
		self.catagoryBox = {}
		catagoryIndex = {}
		catagoryIndex["catagory"] = {}
		catagoryIndexId = {}
		catagoryIndexId["catagory"] = 0
		self.appStack = Gtk.Stack()
		self.appStackPages = {}
		self.appTopBox = {}
		self.appButton = {}
		self.appDescription = {}
		self.appCompatiablity = {}
		self.appScreenshots = {}
		self.appVbox = {}
		self.appStream = {}
		back = None

		def createCatagory(catagoryVar, catagoryName):
			self.catagory[catagoryVar] = Gtk.ListBox()
			self.catagoryScroll[catagoryVar] = Gtk.ScrolledWindow()
			self.catagoryScroll[catagoryVar].add(self.catagory[catagoryVar])
			self.catagoryStack.add_titled(self.catagoryScroll[catagoryVar], catagoryVar + "Page", catagoryName)

			# Add Catagory to List
			self.catagoryRow[catagoryVar] = Gtk.ListBoxRow()
			self.catagoryBox[catagoryVar] = Gtk.Box(spacing=1)
			self.catagoryLabel[catagoryVar] = Gtk.Label()
			self.catagoryLabel[catagoryVar].set_markup("<b>" + catagoryName + "</b>")
			self.catagoryLabel[catagoryVar].set_margin_top(12)
			self.catagoryLabel[catagoryVar].set_margin_bottom(12)
			self.catagoryRow[catagoryVar].add(self.catagoryLabel[catagoryVar])
			self.catagoryList.add(self.catagoryRow[catagoryVar])
			self.catagory[catagoryVar].connect("row-activated", appListClicked, self.mainStack, self.appStack, catagoryVar)

			catagoryIndex["catagory"][catagoryIndexId["catagory"]] = catagoryVar + "Page"
			catagoryIndexId["catagory"] = catagoryIndexId["catagory"] + 1

			catagoryIndex[catagoryVar] = {}
			catagoryIndexId[catagoryVar] = 0

		def catagoryListClicked(self, ListBox, Stack):
			Stack.set_visible_child_name(catagoryIndex["catagory"][ListBox.get_index()])
		
		def appListClicked(self, ListBox, mainStack, appStack, catagoryVar):
			mainStack.set_visible_child_name("appPages")
			print(ListBox.get_index())
			print(catagoryIndex[catagoryVar][ListBox.get_index()])
			appStack.set_visible_child_name(catagoryIndex[catagoryVar][ListBox.get_index()])

		def grabbingIcons():
			if os.path.isdir(APPSTREAMICONDIR) == False:
				os.makedirs(APPSTREAMICONDIR)
				subprocess.call(["wget", "https://appstream.debian.org/data/bullseye/main/icons-64x64.tar.gz"])
				subprocess.call(["tar", "-xf", "icons-64x64.tar.gz", "-C", APPSTREAMICONDIR])
				os.remove("icons-64x64.tar.gz")

			if os.path.isdir(FLATHUBICONDIR) == False:
				os.makedirs(FLATHUBICONDIR)

			if os.path.isdir(FALLBACKICONDIR) == False:
				os.makedirs(FALLBACKICONDIR)

			for app in repo["apps"]:
				if app["package"][0]["flathub"] != "None" and os.path.isfile(FLATHUBICONDIR + app["package"][0]["flathub"] + ".png") == False:
					subprocess.call(["wget", "https://dl.flathub.org/repo/appstream/x86_64/icons/64x64/" + app["package"][0]["flathub"] + ".png", "-P", FLATHUBICONDIR])
				if os.path.isfile(APPSTREAMICONDIR + app["package"][0]["apt"] + ".png") == False and app["package"][0]["flathub"] == "None" and os.path.isfile(FALLBACKICONDIR + app["id"] + ".png") == False:
					subprocess.call(["wget", app["icon-url"], "-O", FALLBACKICONDIR + app["id"] + ".png"]) 

		# Fix Fallback Icons always redownloading

		grabbingIcons()

		# Generating Window
		Gtk.Window.__init__(self, title="Lapp Store")
		self.set_default_size(360, 412)
		self.set_resizable(True)
		# self.set_border_width(10)

		# fHeaderBar

		self.headerBar = Gtk.HeaderBar()
		self.headerBar.set_show_close_button(False) # Adds Close Button (and Minimize Button)
		self.set_titlebar(self.headerBar) # Sets this HeaderBar as the titlebar

		self.backButton = Gtk.Button.new_from_icon_name("go-previous-symbolic", Gtk.IconSize.BUTTON)
		self.backButton.set_sensitive(False)
		self.headerBar.pack_start(self.backButton)

		self.visibleStack = Gtk.Stack()
		self.visibleStack.set_transition_type(Gtk.StackTransitionType.SLIDE_LEFT_RIGHT)
		self.visibleStack.set_transition_duration(250)

		self.mainStack = Gtk.Stack()
		self.visibleStack.set_transition_type(Gtk.StackTransitionType.SLIDE_LEFT_RIGHT)
		self.visibleStack.set_transition_duration(250)

		# findGtkListGen

		self.homeList = Gtk.ListBox()
		self.catagoryList = Gtk.ListBox()
		self.searchList = Gtk.ListBox()
		self.myAppsList = Gtk.ListBox()

		self.catagoryStack = Gtk.Stack()
		self.catagoryStack.set_transition_type(Gtk.StackTransitionType.SLIDE_LEFT_RIGHT)
		self.catagoryStack.set_transition_duration(250)

		# findCatagoryGen

		self.catagoryList = Gtk.ListBox()
		self.catagoryList.set_selection_mode(Gtk.SelectionMode.NONE)
		self.catagoryList.connect("row-activated", catagoryListClicked, self.catagoryStack)
		self.catagoryScroll["catagoryList"] = Gtk.ScrolledWindow()
		self.catagoryScroll["catagoryList"].add(self.catagoryList)
		self.catagoryStack.add_titled(self.catagoryScroll["catagoryList"], "catagoryPage", "Catagories")

		createCatagory("accessories", "Accessories")
		createCatagory("communication", "Communication")
		createCatagory("games", "Fun and Games")
		createCatagory("internet", "Internet and News")
		createCatagory("education", "Education")
		createCatagory("other", "Other")
		createCatagory("productivity", "Productivity")
		createCatagory("system", "System")
		createCatagory("webapps", "Web Apps")
		
		# findVisibleStackSetup

		self.visibleStack.add_titled(self.homeList, "homePage", "Home")
		self.visibleStack.add_titled(self.catagoryStack, "catagoryPage", "Catagories")
		self.visibleStack.add_titled(self.searchList, "searchPage", "Search")
		self.visibleStack.add_titled(self.myAppsList, "myAppsPage", "Installed")

		self.visibleStack.child_set_property(self.homeList, "icon-name", "go-home-symbolic")
		self.visibleStack.child_set_property(self.catagoryStack, "icon-name", "view-list-symbolic")
		self.visibleStack.child_set_property(self.searchList, "icon-name", "system-search-symbolic")
		self.visibleStack.child_set_property(self.myAppsList, "icon-name", "avatar-default-symbolic")

		self.visibleStackSwitcherBar = Handy.ViewSwitcherBar()
		self.visibleStackSwitcherBar.set_stack(self.visibleStack)
		self.visibleStackSwitcherBar.set_reveal(True)
		
		self.mainStack.add_titled(self.visibleStack, "mainPages", "Main")
		self.mainStack.add_titled(self.appStack, "appPages", "App")

		self.mainVBox = Gtk.Box()
		self.mainVBox.set_orientation(Gtk.Orientation.VERTICAL)
		self.mainVBox.pack_end(self.visibleStackSwitcherBar, False, False, 0)
		self.mainVBox.pack_start(self.mainStack, True, True, 0)

		self.add(self.mainVBox)

		# findReadMetadata

		for app in repo["apps"]:
			self.ListBoxRows[app["id"]] = Gtk.ListBoxRow()

			self.Box[app["id"]] = Gtk.Box(spacing=10)
			self.VBox[app["id"]] = Gtk.Box(orientation=Gtk.Orientation.VERTICAL)
			
			if os.path.isfile(APPSTREAMICONDIR + app["package"][0]["apt"] + "_" + app["icon"] + ".png") == True:
				self.Icon[app["id"]] = Gtk.Image.new_from_file(APPSTREAMICONDIR + app["package"][0]["apt"] + "_" + app["icon"] + ".png")
				self.Icon[app["id"] + "ForPage"] = Gtk.Image.new_from_file(APPSTREAMICONDIR + app["package"][0]["apt"] + "_" + app["icon"] + ".png")
			elif os.path.isfile(FLATHUBICONDIR + app["package"][0]["flathub"] + ".png") == True:
				self.Icon[app["id"]] = Gtk.Image.new_from_file(FLATHUBICONDIR + app["package"][0]["flathub"] + ".png")
				self.Icon[app["id"] + "ForPage"] = Gtk.Image.new_from_file(FLATHUBICONDIR + app["package"][0]["flathub"] + ".png")
			elif os.path.isfile(FALLBACKICONDIR + app["id"] + ".png") == True:
				self.Icon[app["id"]] = Gtk.Image.new_from_file(FALLBACKICONDIR + app["id"] + ".png")
				self.Icon[app["id"] + "ForPage"] = Gtk.Image.new_from_file(FALLBACKICONDIR + app["id"] + ".png")
			else: 
				self.Icon[app["id"]] = Gtk.Image()
				self.Icon[app["id"] + "ForPage"] = Gtk.Image()

			self.Name[app["id"]] = Gtk.Label(xalign=0)
			self.Name[app["id"]].set_margin_top(5)
			self.Name[app["id"]].set_markup("<b>" + app["name"] + "</b>")
			self.Name[app["id"] + "ForPage"] = Gtk.Label(xalign=0)
			self.Name[app["id"] + "ForPage"].set_markup("<b>" + app["name"] + "</b>")
			# self.Name[app["id"] + "ForPage"].

			self.ShortDescription[app["id"]] = Gtk.Label(xalign=0, label=app["shortdescription"])
			
			self.Description[app["id"]] = Gtk.Label(label=app["description"])

			self.Box[app["id"]].pack_start(self.Icon[app["id"]], False, False, 0)
			self.VBox[app["id"]].pack_start(self.Name[app["id"]], False, False, 0)
			self.VBox[app["id"]].pack_start(self.ShortDescription[app["id"]], False, False, 0)
			self.Box[app["id"]].pack_start(self.VBox[app["id"]], True, True, 0)

			self.catagory[app["catagory"]].add(self.Box[app["id"]])

			catagoryIndex[app["catagory"]][catagoryIndexId[app["catagory"]]] = None
			catagoryIndexId[app["catagory"]] = catagoryIndexId[app["catagory"]] + 1

			self.appStackPages[app["id"]] = Gtk.Box(orientation=Gtk.Orientation.VERTICAL)
			self.appTopBox[app["id"]] = Gtk.Box(orientation=Gtk.Orientation.HORIZONTAL)
			
			self.appButton[app["id"]] = Gtk.Button(label="Install", valign=Gtk.Align.CENTER, halign=Gtk.Align.CENTER)

			self.appTopBox[app["id"]].pack_start(self.Icon[app["id"] + "ForPage"], False, False, 0)
			self.appTopBox[app["id"]].pack_start(self.Name[app["id"] + "ForPage"], True, True, 0)
			self.appTopBox[app["id"]].pack_start(self.appButton[app["id"]], False, False, 5)

			self.appStackPages[app["id"]].pack_start(self.appTopBox[app["id"]], False, False, 5)
			self.appStack.add_titled(self.appStackPages[app["id"]], app["id"] + "AppPage", app["name"])


mainWindow = lapp()
mainWindow.connect("delete-event", Gtk.main_quit) # Makes the close button close the Window.
mainWindow.show_all()
Gtk.main()
