#!/usr/bin/env python3

import gi
gi.require_version('Gtk', '3.0')
from gi.repository import Gtk
from gi.repository import Gio
from gi.repository.GdkPixbuf import Pixbuf
import os
import subprocess
from urllib.request import urlopen
import json

home = os.getenv("HOME")
lappStoreDir = "{0}/.local/share/lapp-store".format(home)

# if os.path.isdir(lappStoreDir) == False: 
# 	os.makedirs(lappStoreDir)
# 	os.chdir(lappStoreDir)
# 	git = subprocess.Popen(["git", "clone", "https://github.com/pizzalovingnerd/lapp-store-metadata", "."])
# else: 
# 	os.chdir(lappStoreDir)
# 	git = subprocess.Popen(["git", "pull", "https://github.com/pizzalovingnerd/lapp-store-metadata"])
#
# git.wait()

class lapp(Gtk.Window):
	
	# The Window
	def __init__(self):

		def catagoryListClicked(self, ListBox, Stack):
			if ListBox.get_index() == 0: Stack.set_visible_child_name("accessoriesPage")
			if ListBox.get_index() == 1: Stack.set_visible_child_name("communicationPage")
			if ListBox.get_index() == 2: Stack.set_visible_child_name("productivityPage")
			if ListBox.get_index() == 3: Stack.set_visible_child_name("gamesPage")
			if ListBox.get_index() == 4: Stack.set_visible_child_name("internetPage")
			if ListBox.get_index() == 5: Stack.set_visible_child_name("educationPage")
			if ListBox.get_index() == 6: Stack.set_visible_child_name("systemPage")
			if ListBox.get_index() == 7: Stack.set_visible_child_name("webappsPage")


		# Generating Window
		Gtk.Window.__init__(self, title="Lapp Store")
		self.set_default_size(360, 412)
		self.set_resizable(True)
		self.set_border_width(10)

		self.headerBar = Gtk.HeaderBar()
		self.headerBar.set_show_close_button(False) # Adds Close Button (and Minimize Button)
		self.set_titlebar(self.headerBar) # Sets this HeaderBar as the titlebar
		
		self.backButton = Gtk.Button.new_from_icon_name("back", Gtk.IconSize.BUTTON)
		self.backButton.set_sensitive(False)
		self.headerBar.pack_start(self.backButton)

		self.mainStack = Gtk.Stack()
		self.mainStack.set_transition_type(Gtk.StackTransitionType.SLIDE_LEFT_RIGHT)
		self.mainStack.set_transition_duration(250)

		self.homeList = Gtk.ListBox()
		self.catagoryList = Gtk.ListBox()
		self.searchList = Gtk.ListBox()
		self.myAppsList = Gtk.ListBox()
		self.updatesList = Gtk.ListBox()

		self.catagoryStack = Gtk.Stack()
		self.catagoryStack.set_transition_type(Gtk.StackTransitionType.SLIDE_LEFT_RIGHT)
		self.catagoryStack.set_transition_duration(250)

		self.catagoryList = Gtk.ListBox()
		self.catagoryList.set_selection_mode(Gtk.SelectionMode.NONE)
		self.catagoryList.connect("row-activated", catagoryListClicked, self.catagoryStack)
		self.catagoryScroll = Gtk.ScrolledWindow()
		self.catagoryScroll.add(self.catagoryList)
		self.catagoryStack.add_titled(self.catagoryScroll, "catagoryPage", "Catagories")

		self.accessoriesList = Gtk.ListBox()
		self.accessoriesList.set_selection_mode(Gtk.SelectionMode.NONE)
		self.accessoriesScroll = Gtk.ScrolledWindow()
		self.accessoriesScroll.add(self.accessoriesList)
		self.catagoryStack.add_titled(self.accessoriesScroll, "accessoriesPage", "Accessories")

		self.communicationList = Gtk.ListBox()
		self.communicationList.set_selection_mode(Gtk.SelectionMode.NONE)
		self.communicationScroll = Gtk.ScrolledWindow()
		self.communicationScroll.add(self.communicationList)
		self.catagoryStack.add_titled(self.communicationScroll, "communicationPage", "Communication")

		self.productivityList = Gtk.ListBox()
		self.productivityList.set_selection_mode(Gtk.SelectionMode.NONE)
		self.productivityScroll = Gtk.ScrolledWindow()
		self.productivityScroll.add(self.productivityList)
		self.catagoryStack.add_titled(self.productivityScroll, "productivityPage", "Productivity")

		self.gamesList = Gtk.ListBox()
		self.gamesList.set_selection_mode(Gtk.SelectionMode.NONE)
		self.gamesScroll = Gtk.ScrolledWindow()
		self.gamesScroll.add(self.gamesList)
		self.catagoryStack.add_titled(self.gamesScroll, "gamesPage", "Fun and Games")

		self.internetList = Gtk.ListBox()
		self.internetList.set_selection_mode(Gtk.SelectionMode.NONE)
		self.internetScroll = Gtk.ScrolledWindow()
		self.internetScroll.add(self.internetList)
		self.catagoryStack.add_titled(self.internetScroll, "internetPage", "Internet and News")

		self.educationList = Gtk.ListBox()
		self.educationList.set_selection_mode(Gtk.SelectionMode.NONE)
		self.educationScroll = Gtk.ScrolledWindow()
		self.educationScroll.add(self.educationList)
		self.catagoryStack.add_titled(self.educationScroll, "educationPage", "Education")

		self.systemList = Gtk.ListBox()
		self.systemList.set_selection_mode(Gtk.SelectionMode.NONE)
		self.systemScroll = Gtk.ScrolledWindow()
		self.systemScroll.add(self.systemList)
		self.catagoryStack.add_titled(self.systemScroll, "systemPage", "System")

		self.webappsList = Gtk.ListBox()
		self.webappsList.set_selection_mode(Gtk.SelectionMode.NONE)
		self.webappsScroll = Gtk.ScrolledWindow()
		self.webappsScroll.add(self.webappsList)
		self.catagoryStack.add_titled(self.webappsScroll, "webappsPage", "Web Apps")

		self.accessoriesRow = Gtk.ListBoxRow()
		self.accessoriesBox = Gtk.Box(spacing=1)
		self.accessoriesLabel = Gtk.Label()
		self.accessoriesLabel.set_markup("<b>Accessories</b>")
		self.accessoriesLabel.set_margin_top(12)
		self.accessoriesLabel.set_margin_bottom(12)
		self.accessoriesRow.add(self.accessoriesLabel)
		self.catagoryList.add(self.accessoriesRow)

		self.communicationRow = Gtk.ListBoxRow()
		self.communicationBox = Gtk.Box(spacing=1)
		self.communicationLabel = Gtk.Label()
		self.communicationLabel.set_markup("<b>Communication</b>")
		self.communicationLabel.set_margin_top(12)
		self.communicationLabel.set_margin_bottom(12)
		self.communicationRow.add(self.communicationLabel)
		self.catagoryList.add(self.communicationRow)

		self.productivityRow = Gtk.ListBoxRow()
		self.productivityBox = Gtk.Box(spacing=1)
		self.productivityLabel = Gtk.Label()
		self.productivityLabel.set_markup("<b>Productivity</b>")
		self.productivityLabel.set_margin_top(12)
		self.productivityLabel.set_margin_bottom(12)
		self.productivityRow.add(self.productivityLabel)
		self.catagoryList.add(self.productivityRow)

		self.gamesRow = Gtk.ListBoxRow()
		self.gamesBox = Gtk.Box(spacing=1)
		self.gamesLabel = Gtk.Label()
		self.gamesLabel.set_markup("<b>Fun and Games</b>")
		self.gamesLabel.set_margin_top(12)
		self.gamesLabel.set_margin_bottom(12)
		self.gamesRow.add(self.gamesLabel)
		self.catagoryList.add(self.gamesRow)

		self.internetRow = Gtk.ListBoxRow()
		self.internetBox = Gtk.Box(spacing=1)
		self.internetLabel = Gtk.Label()
		self.internetLabel.set_markup("<b>Internet and News</b>")
		self.internetLabel.set_margin_top(12)
		self.internetLabel.set_margin_bottom(12)
		self.internetRow.add(self.internetLabel)
		self.catagoryList.add(self.internetRow)

		self.educationRow = Gtk.ListBoxRow()
		self.educationBox = Gtk.Box(spacing=1)
		self.educationLabel = Gtk.Label()
		self.educationLabel.set_markup("<b>Education</b>")
		self.educationLabel.set_margin_top(12)
		self.educationLabel.set_margin_bottom(12)
		self.educationRow.add(self.educationLabel)
		self.catagoryList.add(self.educationRow)

		self.systemRow = Gtk.ListBoxRow()
		self.systemBox = Gtk.Box(spacing=1)
		self.systemLabel = Gtk.Label()
		self.systemLabel.set_markup("<b>System</b>")
		self.systemLabel.set_margin_top(12)
		self.systemLabel.set_margin_bottom(12)
		self.systemRow.add(self.systemLabel)
		self.catagoryList.add(self.systemRow)

		self.webappsRow = Gtk.ListBoxRow()
		self.webappsBox = Gtk.Box(spacing=1)
		self.webappsLabel = Gtk.Label()
		self.webappsLabel.set_markup("<b>Web Apps</b>")
		self.webappsLabel.set_margin_top(12)
		self.webappsLabel.set_margin_bottom(12)
		self.webappsRow.add(self.webappsLabel)
		self.catagoryList.add(self.webappsRow)

		self.add(self.catagoryStack)

		# self.mainStack.add_titled(self.homeList, "homePage", "Home")
		# self.mainStack.add_titled(self.catagoryStack, "catagoryPage", "Catagories")
		# self.mainStack.add_titled(self.searchList, "searchPage", "Search")
		# self.mainStack.add_titled(self.myAppsList, "myAppsPage", "My Apps")
		# self.mainStack.add_titled(self.updatesList, "updatesPage", "Updates")

	# 	with open("metadata.json") as metadata:
	# 		repo = json.load(metadata)

	# 	for app in repo["iceapps"]:
	# 		exec("def " + app["id"] + """_clicked(self):
	# subprocess.Popen(["ice", "--appname", \"""" + app["name"] +"\", \"--appurl\", \"" + app["url"] + "\", \"--appicon\", \"" + iceStoreDir + "/" + app["id"] + ".png\", \"--appcatagory\", \"" + app["catagory"] + "\", \"--dialogmode\", \"True\"])")

			# exec("self." + app["id"] + "Row = Gtk.ListBoxRow()")
			# exec("self." + app["id"] + "Box = Gtk.Box()")
			# exec("self." + app["id"] + "Grid = Gtk.Grid()")
			# exec("self." + app["id"] + "Grid.set_row_spacing(3)")
			# exec("self." + app["id"] + "Grid.set_column_spacing(10)")
			# exec("self." + app["id"] + "Image = Gtk.Image()")
			# exec("self." + app["id"] + "Pixbuf = Pixbuf.new_from_file_at_size(\"" + app["id"] + ".png\", 48, 48)")
			# exec("self." + app["id"] + "Image.set_from_pixbuf(self." + app["id"] + "Pixbuf)")
			# exec("self." + app["id"] + "Grid.attach(self." + app["id"] + "Image, 1, 3, 2, 2)")
			# exec("self." + app["id"] + "NameLabel = Gtk.Label()")
			# exec("self." + app["id"] + "NameLabel.set_markup(\"<b>\" + app[\"name\"] + \"</b>   <small><i>(\" + app[\"url\"].replace(\"&\", \"&amp;\") + \")</i></small>\")")
			# exec("self." + app["id"] + "NameLabel.set_xalign(0.0)")
			# exec("self." + app["id"] + "Grid.attach(self." + app["id"] + "NameLabel, 3, 3, 3, 1)")
			# exec("self." + app["id"] + "DescriptionLabel = Gtk.Label()")
			# exec("self." + app["id"] + "DescriptionLabel.set_label(app[\"description\"])")
			# exec("self." + app["id"] + "DescriptionLabel.set_xalign(0.0)")
			# exec("self." + app["id"] + "Grid.attach(self." + app["id"] + "DescriptionLabel, 3, 4, 3, 1)")
			# exec("self." + app["id"] + "InstallBtn = Gtk.Button()")
			# exec("self." + app["id"] + "InstallBtn.set_label(\"" + app["price"] + "\")")
			# exec("self." + app["id"] + "InstallBtn.connect(\"clicked\", " + app["id"] + "_clicked)")
			# # exec("self." + app["catagory"] + "ListBoxRow.connect(\"row_selected\", " + app["id"] + "_clicked)")
			# # exec("self." + app["id"] + "Grid.attach(self." + app["id"] + "InstallBtn, 6, 3, 1, 1)")
			# exec("self." + app["id"] + "Box.pack_start(self." + app["id"] + "Grid, True, True, 0)")
			# exec("self." + app["id"] + "Box.pack_start(self." + app["id"] + "InstallBtn, False, False, 0)")
			# exec("self." + app["id"] + "Row.add(self." + app["id"] + "Box)")
			# exec("self." + app["catagory"] + "List.add(self." + app["id"] + "Row)")

mainWindow = lapp()
mainWindow.connect("delete-event", Gtk.main_quit) # Makes the close button close the Window.
mainWindow.show_all()
Gtk.main()
